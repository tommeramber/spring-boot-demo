

#app:
#  datasource:
#    jdbc-url: jdbc:postgresql://172.30.247.88:5432/postgres
#    username: postgres
#    password: mypass
#    pool-size: 30




app:
  datasource:
    jdbc-url: jdbc:postgresql://${DB_URL}:${DB_PORT}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    pool-size: 30

# DB_URL ==> the name of the db svc (oc get svc), Will be saved in configmap 
  #Note! ==> not the exposed URL ! postgres doesn't have web api
# DB_PORT ==> "5432", Will be saved in configmap
# DB_NAME ==> "demodb" , Will be saved in configmap

# DB_USERNAME ==> "postgres" , Will be saved in Secret
# DB_PASSWORD ==> "mypass" , Will be saved in Secret

keycloak:
    enabled: ${SSO_FLAG}
    auth-server-url: http:${SSO_URL}/auth
    realm: ${SSO_REALM}
    resource: ${SSO_CLIENT_NAME}
    #ssl-required: external
    use-resource-role-mappings: true
    public-client: true
    credentials:
      secret: ${SSO_CLIENT_SECRET}
    securityConstraints:
      - securityCollections:
        - name: semi secured
          patterns:
              - /api/v1/person/*
        authRoles:
            - user
            - admin 
      - securityCollections:
        - name: very secured
          patterns:
              - /api/v1/delete
        authRoles:
            - admin
  # Keycloak Enable CORS
    cors: true
  # If true, token contains only roles that are mapped for this client
  # If false, token will contain all roles available to user in realm
    ##use-resource-role-mappings: true/false
  # We don't define securityConstraints here because they are defined programmatically in MicroserviceSecurityConfiguration

