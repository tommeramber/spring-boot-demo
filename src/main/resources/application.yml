

#app:
#  datasource:
#    jdbc-url: jdbc:postgresql://172.30.247.88:5432/postgres
#    username: postgres
#    password: mypass
#    pool-size: 30




app:
  datasource:
    jdbc-url: jdbc:postgresql://${DB_URL}:${DB_PORT}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    pool-size: 30

# DB_URL ==> the name of the db svc (oc get svc), Will be saved in configmap 
  #Note! ==> not the exposed URL ! postgres doesn't have web api
# DB_PORT ==> "5432", Will be saved in configmap
# DB_NAME ==> "demodb" , Will be saved in configmap

# DB_USERNAME ==> "postgres" , Will be saved in Secret
# DB_PASSWORD ==> "mypass" , Will be saved in Secret
keycloak:
  auth-server-url: http:${SSO_URL}
  realm: ${SSO_REALM}
  resource: ${SSO_CLIENT_NAME}
  public-client: true
  credentials.secret: ${SSO_CLIENT_SECRET}
  security-constraints[0].securityCollections[0].name: "semi secured methods"
  security-constraints[0].securityCollections[0].authRoles[0]: USER
  security-constraints[0].securityCollections[0].patterns[0]: /api/v1/person/*
  security-constraints[0].securityCollections[1].name: "very secured methods"
  security-constraints[0].securityCollections[1].authRoles[0]: ADMIN
  security-constraints[0].securityCollections[1].patterns[0]: /api/v1/delete
  # Keycloak Enable CORS
  cors: true
  # If true, token contains only roles that are mapped for this client
  # If false, token will contain all roles available to user in realm
  use-resource-role-mappings: false
  # We don't define securityConstraints here because they are defined programmatically in MicroserviceSecurityConfiguration

